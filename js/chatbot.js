// CHATBOT v3 ‚Äî fuzzy + sin√≥nimos + sugest√µes seguras
import Fuse from "https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.esm.js";
const chatBox=document.getElementById("chat-box"), input=document.getElementById("user-input"), sendBtn=document.getElementById("send-btn"), synToggle=document.getElementById("syn-online"), synStatus=document.getElementById("syn-status");
let fuse, knowledgeBase=[]; const SYN=new Map(); const CACHE_KEY="faqbot_syn_cache_v1"; let synCache=loadCache();
const FUSE_THRESHOLD=0.30, ACCEPT_SCORE=0.45, MIN_OVERLAP=1, MAX_SUGGEST=4;
function appendMessage(html,sender="bot"){const el=document.createElement("div"); el.className=`message ${sender}`; el.innerHTML=html; chatBox.appendChild(el); chatBox.scrollTop=chatBox.scrollHeight;}
function setSynStatus(m){ if(synStatus) synStatus.textContent=m||""; }
function loadCache(){ try{const raw=localStorage.getItem(CACHE_KEY); return raw?JSON.parse(raw):{t:0,data:{}};}catch{return{t:0,data:{}};} }
function saveCache(){ try{localStorage.setItem(CACHE_KEY, JSON.stringify(synCache));}catch{} }
async function fetchDatamuse(term){ const url=`https://api.datamuse.com/words?ml=${encodeURIComponent(term)}&max=20`; const r=await fetch(url,{mode:"cors"}); if(!r.ok) throw new Error("Datamuse indispon√≠vel"); const arr=await r.json(); return (arr||[]).map(x=>(x.word||"").toLowerCase()).filter(Boolean); }
function escapeRx(s){return s.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");}
function expandText(text){let t=` ${text.toLowerCase()} `; for(const [canon,set] of SYN.entries()){ for(const s of set){ if(!s||s===canon) continue; const rx=new RegExp(`(^|\\W)${escapeRx(s)}(\\W|$)`,"g"); t=t.replace(rx,`$1${canon}$2`);} } return t.trim(); }
function buildSynFromKB(){ const words=new Set(); for(const e of knowledgeBase)(e.keywords||[]).forEach(k=>k.split(/\s+/).forEach(w=>words.add(w.toLowerCase()))); for(const w of words) if(!SYN.has(w)) SYN.set(w,new Set([w])); }
async function loadSynonymsFile(){ try{ const res=await fetch("data/synonyms.json",{cache:"no-store"}); if(!res.ok) return; const data=await res.json(); const map=data?.map||{}; for(const [canon,list] of Object.entries(map)){ if(!SYN.has(canon)) SYN.set(canon,new Set([canon])); list.forEach(s=>SYN.get(canon).add(String(s).toLowerCase())); } }catch{} }
async function enrichSynOnline(limit=30){ const now=Date.now(), EXPIRE=7*24*60*60*1000; const needRefresh=(now-(synCache.t||0))>EXPIRE; let processed=0; for(const canon of SYN.keys()){ if(processed>=limit) break; if(!needRefresh && synCache.data && synCache.data[canon]){ const arr=synCache.data[canon]; const set=SYN.get(canon); arr.forEach(s=>set.add(s)); continue; } try{ const syns=await fetchDatamuse(canon); const set=SYN.get(canon); if(!synCache.data) synCache.data={}; synCache.data[canon]=syns; syns.forEach(s=>set.add(s)); processed++; }catch{} } synCache.t=now; saveCache(); }
const GENERICOS=new Set(["modulo","m√≥dulo","m√≥dulos","modulos","extra","extras","curso","cursos","aula","aulas","formacao","forma√ß√µes","formacoes","o","a","os","as","que","qual","quais","√©","e","de","do","da","um","uma","sobre"]);
function tokens(s){ return (s||"").toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^a-z0-9\s-]/g," ").split(/\s+/).filter(t=>t.length>=3); }
function overlapCount(aTokens,bTokens){ const A=new Set(aTokens), B=new Set(bTokens); let n=0; for(const t of A) if(B.has(t)) n++; return n; }
function entryTokens(entry){ return [...(entry.keywords||[]), entry.answer||""].flatMap(tokens); }
function entryTitle(entry){ const a=entry.answer||""; const m=a.match(/^(Curso|M√≥dulo extra)\s*:\s*([^\n]+)/i); if(m) return m[2].trim(); const k=(entry.keywords||[]).find(x=>(x||"").split(" ").length>=2)||(entry.keywords||[])[0]; return (k||"Resposta"); }
function showSuggestions(suggestions){ const html=["<div>Queres dizer:</div>",`<div style="display:flex;flex-wrap:wrap;gap:8px;margin-top:6px">`+suggestions.map(s=>`<button class="chip" data-fill="${s}">${s}</button>`).join("")+`</div>`].join(""); appendMessage(html,"bot"); document.querySelectorAll(".chip").forEach(btn=>{ btn.style.padding="6px 10px"; btn.style.borderRadius="999px"; btn.style.background="#0b1222"; btn.style.border="1px solid #20304f"; btn.style.color="#e5e7eb"; btn.addEventListener("click", ()=>{ input.value=btn.dataset.fill; handleUserMessage(); });}); }
function isDefinitionIntent(q){ return /(o que √©|o que sao|o que s√£o|defini√ß√£o|como funciona|que significa)/i.test(q); }
function hasSpecificTerms(q){ const tks=tokens(q).filter(t=>!GENERICOS.has(t)); return tks.length>=1; }
function findDefinitionFor(term){ const q=term.toLowerCase(); for(const e of knowledgeBase){ if((e.keywords||[]).some(k=>{ const kk=k.toLowerCase(); return kk===q||kk.includes(q)||q.includes(kk);})){ return e.answer; } } return null; }
async function loadKnowledge(){ const res=await fetch("data/knowledge.json",{cache:"no-store"}); const data=await res.json(); knowledgeBase=data.faq||[]; await loadSynonymsFile(); buildSynFromKB(); if(synToggle?.checked){ setSynStatus("a recolher sin√≥nimos‚Ä¶"); await enrichSynOnline(30); setSynStatus("sin√≥nimos online ativos"); } else setSynStatus("sin√≥nimos online desligados"); fuse=new Fuse(knowledgeBase,{ includeScore:true, shouldSort:true, threshold:FUSE_THRESHOLD, minMatchCharLength:3, keys:[{name:"keywords",weight:0.8},{name:"answer",weight:0.2}] }); }
function findAnswer(question){ const qNorm=expandText(question.toLowerCase()); const qTok=tokens(qNorm); if(/m(√≥|o)dulo(s)? extra(s)?/i.test(qNorm) && (isDefinitionIntent(qNorm)||!hasSpecificTerms(qNorm))){ const def=findDefinitionFor("m√≥dulo extra")||findDefinitionFor("modulo extra"); if(def) return {type:"answer", text:def}; } for(const e of knowledgeBase){ for(const k of (e.keywords||[])){ const kk=k.toLowerCase(); if(qNorm===kk||qNorm.includes(kk)||kk.includes(qNorm)) return {type:"answer", text:e.answer}; } } const ranked=fuse.search(qNorm).map(r=>({ r, overlap: overlapCount(qTok, entryTokens(r.item)), title: entryTitle(r.item) })).filter(x=>x.overlap>=MIN_OVERLAP); if(ranked.length && ranked[0].r.score<ACCEPT_SCORE){ return {type:"answer", text:ranked[0].r.item.answer}; } if(ranked.length){ const suggestions=ranked.slice(0,MAX_SUGGEST).map(x=>x.title); return {type:"suggest", suggestions}; } return {type:"none"}; }
function handleUserMessage(){ const question=input.value.trim(); if(!question) return; appendMessage(question,"user"); input.value=""; setTimeout(()=>{ const out=findAnswer(question); if(out.type==="answer"){ appendMessage(out.text,"bot"); } else if(out.type==="suggest"){ showSuggestions(out.suggestions); } else { appendMessage("N√£o tenho a certeza do que procuras ü§î<br>Podes especificar melhor (ex.: nome do m√≥dulo/curso)?","bot"); } if(out.type!=="answer"){ try{ const log=JSON.parse(localStorage.getItem("faqbot_misses")||"[]"); log.push({q:question, ts:Date.now()}); localStorage.setItem("faqbot_misses", JSON.stringify(log).slice(0,5000)); }catch{} } },250); }
sendBtn.addEventListener("click", handleUserMessage);
input.addEventListener("keypress", e=>{ if(e.key==="Enter") handleUserMessage(); });
synToggle?.addEventListener("change", async ()=>{ if(synToggle.checked){ setSynStatus("a recolher sin√≥nimos‚Ä¶"); await enrichSynOnline(30); setSynStatus("sin√≥nimos online ativos"); } else setSynStatus("sin√≥nimos online desligados"); });
loadKnowledge();
